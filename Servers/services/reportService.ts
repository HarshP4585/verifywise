import { getProjectRisksReportQuery, getMembersByProjectIdQuery } from "../utils/reporting.utils";
import { ReportType } from "../models/reporting.model";

interface reportBodyData {
  projectTitle: string,
  projectOwner: string
}

/*
  Get member lists by projectId
  Check whether the user belongs to current project
*/
export async function isAuthorizedUser(
  projectId: number,
  userId: number
) : Promise<any> {
  const members = await getMembersByProjectIdQuery(projectId);
  const membersArray = members.map(m => m.user_id);

  if(!membersArray.includes(userId)){
    return false;
  }else{
    return true;
  }
}

/*
  Get report data base on requested report type
*/
export async function getReportData(
    projectId: number,
    reportType: string,
    reportBody: reportBodyData
  ) : Promise<any> {
    
  let markdownFormattedData;
  switch(reportType) {
    case ReportType.PROJECTRISK_REPORT:
      markdownFormattedData = getProjectRiskMarkdown(projectId, reportBody)
      break;
    default:
      throw new Error(`Report type "${reportType}" is not supported`);
  }
  return markdownFormattedData;
}
  
/*
  This is the markdown data for project risk report
*/
export async function getProjectRiskMarkdown (
    projectId: number,
    data: reportBodyData
  ) : Promise<any> {
  let rows: string;
  const reportData = await getProjectRisksReportQuery(projectId);

  if (reportData.length > 0) {
    rows = reportData.map((risk: { risk_name: any; risk_owner: any; risk_severity: any; likelihood: any; approval_status: any; risk_level_autocalculated: any; deadline: { toLocaleDateString: () => any; }; }) => 
      `| ${risk.risk_name} | ${risk.risk_owner} | ${risk.risk_severity} | ${risk.likelihood} | ${risk.approval_status} | ${risk.risk_level_autocalculated} | ${risk.deadline.toLocaleDateString()} |`
    ).join('\n');
  } else {
    rows = `| - | - | - | - | - | - | - |`
  }

  const projectRiskMD = `
VerifyWise Project Risk Report
========================

This report is generated by the VeriftyWise Project Risk. It aims to provide a way to demonstrate their claims about the risks of their AI systems.
  
- **Report Date :** ${new Date().toLocaleDateString()}
- **Project :** ${data.projectTitle}
- **Owner :** ${data.projectOwner}

Project Risk Table
-------------
| Risk Name | Owner | Severity | Likelihood | Mitigation Status	| Risk Level | Target Date | 
|----|----|----|----|----|----|----|
${rows}
`
  return projectRiskMD;
}

